C51 COMPILER V9.51   LCD                                                                   06/24/2022 17:48:14 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD.c OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          // Autor: dr inz. Krzysztof Murawski
   2          
   3          #define Test 0  // 1 - do testowania
   4                          // 0 - normalna praca
   5          // Definicje zasobow sprzetowych
   6          sfr  P2    = 0xA0;
   7          sbit P2_6  = P2^6;
   8          sbit P2_5  = P2^5;
   9          sbit P2_4  = P2^4;
  10          sbit P2_3  = P2^3;
  11          sbit P2_2  = P2^2;
  12          sbit P2_1  = P2^1;
  13          sbit P2_0  = P2^0;
  14          
  15          // Definicje ogolne
  16          #define False         0  
  17          #define True          1
  18          
  19          // Definicje podlaczenia wyswietlacza LCD
  20          #define LCD_RS    P2_4         /* p1.4 LCD Register Select line           */
  21          #define LCD_RW    P2_5         /* p1.5 LCD Read / Write line              */
  22          #define LCD_E     P2_6         /* p1.6 LCD Enable line                    */
  23          #define LCD_DB4   P2_0         /* high nibble of port 1 is used for data  */
  24          #define LCD_DB5   P2_1         /* high nibble of port 1 is used for data  */
  25          #define LCD_DB6   P2_2         /* high nibble of port 1 is used for data  */
  26          #define LCD_DB7   P2_3         /* high nibble of port 1 is used for data  */
  27          
  28          // Definicje komend wyswietlacza LCD
  29          #define LCD_CONFIG          0x28
  30          #define LCD_CLEAR           0x01
  31          #define LCD_HOME            0x02
  32          #define LCD_ENTRY_MODE      0x06
  33          #define LCD_DISPLAY_OFF     0x08
  34          #define LCD_CURSOR_ON       0x0A
  35          #define LCD_DISPLAY_ON      0x0C
  36          #define LCD_CURSOR_BLINK    0x0D
  37          #define LCD_CURSOR_LINE     0x0E
  38          #define LCD_CURSOR_COM      0x0F
  39          #define LCD_CURSOR_LEFT     0x10
  40          #define LCD_CURSOR_RIGHT    0x14
  41          #define LCD_SHIFT_LEFT      0x18
  42          #define LCD_SHIFT_RIGHT     0x1C
  43          #define LCD_SET_CGRAM_ADDR  0x40
  44          #define LCD_SET_DDRAM_ADDR  0x80
  45          
  46          // Definicje ekranow
  47          static unsigned char code Screan[] =  "                "
  48                                                "Odebrano:       "
  49                                                "Wartosc dec:    "
  50                                                "Wartosc hex:    ";
  51          
  52          // Importowane procedury i funkcje
  53          extern w1ms();
  54          extern w5mS();
  55          extern w50mS();
C51 COMPILER V9.51   LCD                                                                   06/24/2022 17:48:14 PAGE 2   

  56          
  57          //Wyslanie komendy do wyswietlacza LCD. Magistrala danych 4-o bitowa
  58          void Lcd_WriteControl (unsigned char LcdCommand)
  59           {
  60   1         unsigned char Lcd_Comm = 0;
  61   1         static bit LCDReady;
  62   1          
  63   1         LCD_RS = False;
  64   1         LCD_RW = False;
  65   1      
  66   1         Lcd_Comm = LcdCommand >> 4;
  67   1         P2 &= 0xF0;
  68   1         P2 |= Lcd_Comm;
  69   1      
  70   1         LCD_E = True;
  71   1         LCD_E = False;
  72   1      
  73   1         Lcd_Comm = LcdCommand & 0x0F;  
  74   1         P2 &=0xF0;      // P2 = P2 & 0xF0
  75   1         P2 |= Lcd_Comm;
  76   1      
  77   1         LCD_E = True;
  78   1         LCD_E = False;
  79   1      
  80   1         P2 |= 0x0F;     // P2 = P2 | 0x0F
  81   1      
  82   1         LCD_RW = True;
  83   1         LCD_RS = False;
  84   1         
  85   1         if (Test == 0)
  86   1          {
  87   2            LCDReady = 1;
  88   2            while (LCDReady == 1)
  89   2             {
  90   3               LCD_E = True;
  91   3               LCDReady = LCD_DB7;
  92   3               LCD_E  = False;
  93   3               LCD_E = True;
  94   3               LCD_E  = False;
  95   3             }
  96   2          }          
  97   1       }
  98          
  99          // Wyslanie danych do wyswietlacza LCD. Magistrala 4-o bitowa
 100          static void Lcd_WriteData (unsigned char LcdData)
 101           {
 102   1         unsigned char Lcd_Data = 0;
 103   1         static bit LCDReady;
 104   1       
 105   1         LCD_RS = True;
 106   1         LCD_RW = False;
 107   1      
 108   1         Lcd_Data = LcdData >> 4;
 109   1         P2 &= 0xF0;
 110   1         P2 |= Lcd_Data;
 111   1      
 112   1         LCD_E = True;
 113   1         LCD_E = False;
 114   1      
 115   1         Lcd_Data = LcdData & 0x0F;  
 116   1         P2 &=0xF0;   
 117   1         P2 |= Lcd_Data;
C51 COMPILER V9.51   LCD                                                                   06/24/2022 17:48:14 PAGE 3   

 118   1      
 119   1         LCD_E = True;
 120   1         LCD_E = False;
 121   1      
 122   1         P2 |= 0x0F;
 123   1      
 124   1         LCD_RW = True;
 125   1         LCD_RS = False;
 126   1         
 127   1         if (Test == 0)
 128   1          {
 129   2            LCDReady = 1;
 130   2            while (LCDReady == 1)
 131   2             {
 132   3               LCD_E = True;
 133   3               LCDReady = LCD_DB7;
 134   3               LCD_E  = False;
 135   3               LCD_E  = True;
 136   3               LCD_E  = False;
 137   3             }
 138   2          }             
 139   1       }
 140          
 141          // Wyswietlenie znaku w miejscu polozenie kursora
 142          void Lcd_DisplayCharacter (char a_char)
 143           {
 144   1         Lcd_WriteData(a_char);
 145   1       }
 146          
 147          /* Ustawienie kursora na wskazany wiersz i kolumne.
 148          *     1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16
 149          *    ----------------------------------------------------------------
 150          * 1 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 151          * 2 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 152          * 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 153          * 4 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 154          */
 155          void Lcd_Cursor (char row, char column)
 156           {
 157   1         if (row == 1) Lcd_WriteControl (0x80 + column - 1);
 158   1         if (row == 2) Lcd_WriteControl (0xc0 + column - 1);
 159   1         if (row == 3) Lcd_WriteControl (0x90 + column - 1);
 160   1         if (row == 4) Lcd_WriteControl (0xd0 + column - 1);
 161   1       }
 162          
 163          // Wyswietlenie ciagu znakow w konkretym wierszu (bez zawijania wiersza)
 164          void Lcd_DisplayRow (char row, char *string)
 165           {
 166   1         char i;
 167   1         Lcd_Cursor (row, 1);
 168   1         for (i=0; i<16; i++) Lcd_DisplayCharacter (*string++);
 169   1       }
 170          
 171          
 172          // Wyswietlenie calego ekranu - 64 znaki. Znaki zawarte w tablicy
 173          /* przyklad:
 174          ** char screen[] =  "PBW-850   2003r."
 175          **                  "----------------"
 176          **                  "  K. Murawski   "
 177          **                  "J. Chudzikiewicz";
 178          **      LCD_DisplayScreen(screen);
 179          */
C51 COMPILER V9.51   LCD                                                                   06/24/2022 17:48:14 PAGE 4   

 180          void Lcd_DisplayScreen (char *ptr)
 181           {
 182   1         Lcd_DisplayRow(1,ptr +  0);
 183   1         Lcd_DisplayRow(2,ptr + 16);
 184   1         Lcd_DisplayRow(3,ptr + 32);
 185   1         Lcd_DisplayRow(4,ptr + 48);
 186   1       }
 187          
 188          // Wyswietlenie ekranu powitalnego
 189          void LcdWelcome(void)
 190           {
 191   1         Lcd_DisplayScreen(Screan);        
 192   1       }
 193          
 194          // Wyswietlenie ciagu znakow od danej kolumny i wiersza
 195          void Lcd_DisplayString (char row, char column, char *string)
 196           {
 197   1         Lcd_Cursor (row, column);
 198   1         while (*string) Lcd_DisplayCharacter (*string++);
 199   1       }
 200          
 201          // Inicjalizacja wyswietlacza; 4 wiersze, 4 bitowa magistrala danych
 202          void LcdInit(void)
 203           {
 204   1         w50mS();
 205   1         P2 = 0x83;
 206   1         LCD_E   = True;
 207   1           w1ms();
 208   1         LCD_E   = False;
 209   1         w5mS();
 210   1         LCD_E   = True;
 211   1           w1ms();
 212   1         LCD_E   = False;
 213   1         w1ms();
 214   1         LCD_E   = True;
 215   1           w1ms();
 216   1         LCD_E   = False;
 217   1         w1ms();
 218   1         LCD_DB4 = False;
 219   1         LCD_E   = True;
 220   1           w1ms();
 221   1         LCD_E   = False;
 222   1         w1ms();
 223   1         Lcd_WriteControl(LCD_CONFIG);     
 224   1         Lcd_WriteControl(LCD_CLEAR);      
 225   1         Lcd_WriteControl(LCD_DISPLAY_OFF);
 226   1         Lcd_WriteControl(LCD_DISPLAY_ON); 
 227   1         Lcd_WriteControl(LCD_ENTRY_MODE); 
 228   1         Lcd_WriteControl(LCD_CURSOR_COM); 
 229   1         Lcd_WriteControl(LCD_CLEAR);      
 230   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    381    ----
   CONSTANT SIZE    =     65    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.51   LCD                                                                   06/24/2022 17:48:14 PAGE 5   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
